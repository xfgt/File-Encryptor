АНАЛИЗ

	"Минусите на програмата ми"

- нямам имена на аргументите в хедъра и трябва винаги да гледам какво се изисква от мен, 
вместо да използвам подзказката от идето

- allocate-deallocate charArrays - хубаво би било да е направен custom тип който да пази data и размер, 
за да може размера винаги да е коректен и паметта винаги да се освобождава правилно 
struct StringList{
	char** names;
	const unsigned numberOfNames;
	const unsigned wordLenght;

	Конструктор с throw
	Деструктор
	гетъри, сетъри
	К–Констр.
	предефинирани оператори всичко останало
}


- грешките трябва да се обработват с throw и try catch ( това покрива всички създадени функции )
- онази "сол" трябва да не бъде дефинирана в кода, ами да се избира.


---- Обяснение алгоритъм за encryptCharArr / decrypt... ----

for(int i = 0; i < size; i++) {
    
    char res = arr[i] ^ pwdCharArr[i];

    if (arr[i] == 0) { // get around of 0 XOR whatever
        
        res = (salt ^ pwdCharArr[i]); // 2 here is the salt
        // con: hard-coded

        std::clog << "[encryptCharArr]\t result[" << i << "]\tresult = (" << salt << " ^ " << int(pwdCharArr[i]) << ") -> " << int(res) << std::endl;
    }
    arr[i] = res;

}
====================================
for(int i = 0; i < size; i++) {
    char res = arr[i] ^ pwdCharArr[i];

    if(arr[i] == ((salt ^ pwdCharArr[i]))) { // 2 is custom
        // change to 0
        // then xor
        res = (res^salt);

        std::clog << "[decryptCharArr]\t result[" << i << "]\tresult = (" << salt << " ^ " << int(pwdCharArr[i]) << ") -> " << int(res) << std::endl;
    }

    arr[i] = res;


}


За всеки символ на подадения,
първоначално се извлича резултат от XOR на символа от
оригиналния масив и поредния от конкатенираната парола.

Сравняваме символа от оригиналния низ с нула.
Защо?
Резултатът на XOR с който и да е символ и 0 резултира
до оригиналния символ, правейки "криптирането" безмислено,
и възможност за намиране на паролата измежду байтовете на 
новосъздаващия се файл. Това е проблем.

Проблем също създава и 1, понеже при декриптиране
всички оригинални 0ли се превърщат в 1ци, което е признак
за нарушаване на автентичността на файла.

Избираме 2 като валидна стойност за XOR с който и да е символ
Той криптира 0ли и единици а при декриптиране резултатът не
се различава от оригинала преди криптиране.

Накрая резултата замества оригиналния символ в поредицата
завършвайки с крипирания или декриптирания низ от елементи.




- compareSectors
Разчитам original other да са един размер, а всъщност трябва да няма
трети аргумент и символите да се проверяват докато не се намери различен
или единия да е по малък от другия

Друг интересен подход е да се ползва strcmp, каствайки 
низовете до const char*




-getFileBytes
Хубво е фукцията да приема std::istream, за да избегнем проверка дали файла е отворен
а да приемем че ако ще ползваме функцията файла е валиден и отворен.
Това може да се предложи за по-голямата част от функциите,
приемащи само името const char*.


-indexBinaryBadRelationship

Извличането на "entry" от индекс файла, би било хубаво да бъде реализирано като отделна процедура, ориентирана
конкретно към index файла.

Имам предвид това:
while(std::getline(readFile, lineString)) {
    std::stringstream ss;
    ss << lineString;
    ss >> fileName >> startPos >> endPos;
}


-getPosLineFromIndex
(ред 300)
Защо -2?.
Там където е точката на горния ред, е позиция 5092 спрямо началото на файла, а позицията на 
^ това 'Т' e 5094 от единия му край и 5096 от другия.
В случая започвам с курсора от края, което е 2 символа преди истинсия край, и затова добавям две.
Минусът тук е че разчитам на константа.


-readSector_fromBinaryIndex_toFile
Ужасно име за процедура; Смесвам snake_case и camelCase;
Няма консинтентност в имената на променливите и процедурите, въпреки че наблягам най-много на camelCase.
Хубаво е да избера case, който да ми подпомага да коригирам имена изтривайки блокове от символи с ctrl + backspace.
Такъв е kebab-case.



-registerNewFile

Четем сорс файла, криптираме при налична парола, записваме в дата файла и индекс файла.
Има повтарящи се процедури, които могат да се "изолират" като отделни спомагателни модули.


-unregister
Проверяваме за правилната комбинация от index и data;

Процедурата се разделя на две - ако имаме само един запис или повече от един записи.

при един запис:
	Прочитаме елементите на записа и ако съвпадат, просто отваряме файла с trunc
	иначе връщаме false, което означава че това което искаме да изтрием не съществува и в двата файла.
	
	
при множество от записи:
	Реализираме масив от всички записи;
	Те се променят по координати от момента на намиране на търсения запис;
	
	Когато записа е намерен, той се изтрива от двата файла и неговото съдържание се декриптира, според подадената парола.
	При съвпадение се вдига флаг за презаписването на индекса и дата файловете, като 
	се взима предвид размера на файла за премахване и последната позиция на файла във файла за данни;
	
	
	всеки запис от индекса се модифицира тук:
	binaryFile.seekp(-(fileSizeBytes+sectorBytesSize), std::ios::cur);
	
	а файла за данни се презаписва от Х на файла за премахване до края на всичко останало след Y на файла.
	
	Изтриването е просто презаписване с други данни. :)
	



-encrypt 
	свързана е с registerNewFile в цикъл.
	Новите файлове от списъка се добавят а съществуващите се пропускат.
	
	
-decrypt
	свързана  с indexBinaryBadRelationship и readSector_fromBinaryIndex_toFile, която създава отделния нов декриптиран файл
	
	
-remove
	свързана с unregister;
	
	
- inputHexToDec (превежда байтове в десетични числа)
	проверка на подадени байтове от конзолата към десетични числа
	
- fileContentsToDecimal
	kato inputHexToDec но записва във файл (превежда байтове в десетични числа)